// Generated by JFlex 1.9.2 http://jflex.de/  (tweaked for IntelliJ platform)
// source: SphereScript.flex

package com.github.mtwango.intellijscpplugin.language;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.github.mtwango.intellijscpplugin.language.psi.SphereScriptTypes;
import com.intellij.psi.TokenType;


class SphereScriptLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int IN_VARIABLE = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1, 1
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\37\u0200\1\u0300\u10de\u0200";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\0\1\1\1\3\22\0\1\1"+
    "\1\4\1\5\2\0\1\6\1\7\1\0\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\11\21"+
    "\1\0\1\22\1\23\1\24\1\25\1\0\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\1\61\1\62\1\63\1\0\1\64\1\0\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\1\65\1\66\1\67\262\0\2\70\115\0\1\71"+
    "\u01aa\0\1\72\325\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\2\3\1\4\1\5\1\6\1\1"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\2\17\1\20\1\21\1\22\1\23\1\1\17\24\1\25"+
    "\1\26\1\27\1\1\1\30\2\1\1\31\2\32\1\33"+
    "\1\34\1\5\1\0\1\35\1\0\1\36\2\0\1\37"+
    "\1\40\1\41\24\0\14\24\1\42\1\43\3\24\1\44"+
    "\13\24\1\0\1\45\1\42\1\43\6\0\1\46\1\47"+
    "\73\0\10\24\1\0\1\24\1\0\3\24\1\50\3\24"+
    "\1\51\4\24\1\51\2\24\1\0\5\24\1\0\1\52"+
    "\2\0\1\51\1\0\1\36\7\0\1\53\32\0\1\53"+
    "\54\0\10\24\1\0\2\54\3\24\1\0\4\24\1\0"+
    "\2\24\1\55\2\24\1\0\1\24\1\0\3\24\1\0"+
    "\1\24\1\0\2\24\1\0\1\56\2\24\116\0\1\53"+
    "\11\0\2\24\2\57\3\24\1\0\2\24\1\0\1\24"+
    "\1\0\1\24\1\60\1\24\1\60\5\24\1\0\4\24"+
    "\1\0\1\24\1\0\3\24\1\0\1\24\1\0\2\24"+
    "\1\0\1\24\1\61\2\62\26\0\1\53\4\0\1\53"+
    "\103\0\4\24\1\0\2\24\1\0\2\63\1\64\1\24"+
    "\1\0\2\65\2\24\1\0\2\24\1\0\1\24\1\0"+
    "\2\24\1\0\1\24\1\0\1\66\2\24\1\0\1\24"+
    "\1\0\2\24\20\0\1\53\1\0\1\53\123\0\1\67"+
    "\1\24\1\70\1\24\1\0\1\71\1\24\1\0\1\24"+
    "\1\0\2\24\1\0\2\24\1\0\1\24\1\0\1\72"+
    "\1\24\1\0\1\73\1\24\1\0\1\24\1\0\1\24"+
    "\1\74\1\72\121\0\1\75\2\76\1\24\1\0\2\77"+
    "\2\100\1\24\1\0\2\101\1\24\2\102\1\24\1\0"+
    "\1\24\1\0\1\24\1\0\1\103\76\0\1\24\1\0"+
    "\1\24\1\0\2\24\1\0\1\24\54\0\1\24\1\0"+
    "\2\104\2\105\2\106\2\107\33\0\1\53\2\110\42\0"+
    "\1\53\21\0\1\53\6\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[1050];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\73\0\166\0\261\0\166\0\354\0\u0127\0\u0162"+
    "\0\166\0\u019d\0\166\0\166\0\166\0\166\0\166\0\166"+
    "\0\166\0\u01d8\0\u0213\0\u024e\0\166\0\u0289\0\u02c4\0\u02ff"+
    "\0\u033a\0\u0375\0\u03b0\0\u03eb\0\u0426\0\u0461\0\u049c\0\u04d7"+
    "\0\u0512\0\u054d\0\u0588\0\u05c3\0\u05fe\0\u0639\0\u0674\0\u06af"+
    "\0\u06ea\0\166\0\166\0\u0725\0\166\0\u0760\0\u079b\0\u07d6"+
    "\0\166\0\u0811\0\166\0\166\0\166\0\u084c\0\166\0\u0887"+
    "\0\u08c2\0\u08fd\0\u0938\0\166\0\166\0\166\0\u0973\0\u09ae"+
    "\0\u09e9\0\u0a24\0\u0a5f\0\u0a9a\0\u0ad5\0\u0b10\0\u0b4b\0\u0b86"+
    "\0\u0bc1\0\u0bfc\0\u0c37\0\u0c72\0\u0cad\0\u0ce8\0\u0d23\0\u0d5e"+
    "\0\u0d99\0\u0dd4\0\u0e0f\0\u0e4a\0\u0e85\0\u0ec0\0\u0efb\0\u0f36"+
    "\0\u0f71\0\u0fac\0\u0fe7\0\u1022\0\u105d\0\u1098\0\u04d7\0\u04d7"+
    "\0\u10d3\0\u110e\0\u1149\0\u04d7\0\u1184\0\u11bf\0\u11fa\0\u1235"+
    "\0\u1270\0\u12ab\0\u12e6\0\u1321\0\u135c\0\u1397\0\u13d2\0\u140d"+
    "\0\166\0\166\0\166\0\u1448\0\u1483\0\u14be\0\u14f9\0\u1534"+
    "\0\u156f\0\u08fd\0\u0938\0\u15aa\0\u15e5\0\u1620\0\u165b\0\u1696"+
    "\0\u16d1\0\u170c\0\u1747\0\u1782\0\u17bd\0\u17f8\0\u1833\0\u186e"+
    "\0\u18a9\0\u18e4\0\u191f\0\u195a\0\u1995\0\u19d0\0\u1a0b\0\u1a46"+
    "\0\u1a81\0\u1abc\0\u1af7\0\u1b32\0\u1b6d\0\u1ba8\0\u1be3\0\u1c1e"+
    "\0\u1c59\0\u1c94\0\u1ccf\0\u1d0a\0\u1d45\0\u1d80\0\u1dbb\0\u1df6"+
    "\0\u1e31\0\u1e6c\0\u1ea7\0\u1ee2\0\u1f1d\0\u1f58\0\u1f93\0\u1fce"+
    "\0\u2009\0\u2044\0\u207f\0\u20ba\0\u20f5\0\u2130\0\u216b\0\u21a6"+
    "\0\u21e1\0\u221c\0\u2257\0\u2292\0\u22cd\0\u2308\0\u2343\0\u237e"+
    "\0\u23b9\0\u23f4\0\u242f\0\u246a\0\u24a5\0\u24e0\0\u251b\0\u2556"+
    "\0\u2591\0\u25cc\0\u2607\0\u2642\0\u267d\0\u26b8\0\u26f3\0\u272e"+
    "\0\u2769\0\u27a4\0\u27df\0\u281a\0\u2855\0\u04d7\0\u2890\0\u28cb"+
    "\0\u2906\0\u2941\0\u297c\0\u29b7\0\u29f2\0\u2a2d\0\u2a68\0\166"+
    "\0\u2aa3\0\u2ade\0\166\0\u2b19\0\166\0\u2b54\0\u2b8f\0\u2bca"+
    "\0\u2c05\0\u2c40\0\u2c7b\0\u2cb6\0\166\0\u2cf1\0\u2d2c\0\u2d67"+
    "\0\u2da2\0\u2ddd\0\u2e18\0\u2e53\0\u2e8e\0\u2ec9\0\u2f04\0\u2f3f"+
    "\0\u2f7a\0\u2fb5\0\u2ff0\0\u302b\0\u3066\0\u30a1\0\u30dc\0\u3117"+
    "\0\u3152\0\u318d\0\u31c8\0\u3203\0\u323e\0\u3279\0\u32b4\0\u32ef"+
    "\0\u332a\0\u3365\0\u33a0\0\u33db\0\u3416\0\u3451\0\u348c\0\u34c7"+
    "\0\u3502\0\u353d\0\u3578\0\u35b3\0\u35ee\0\u3629\0\u3664\0\u369f"+
    "\0\u36da\0\u3715\0\u3750\0\u378b\0\u37c6\0\u3801\0\u383c\0\u3877"+
    "\0\u38b2\0\u38ed\0\u3928\0\u3963\0\u399e\0\u39d9\0\u3a14\0\u3a4f"+
    "\0\u3a8a\0\u3ac5\0\u3b00\0\u3b3b\0\u3b76\0\u3bb1\0\u3bec\0\u3c27"+
    "\0\u3c62\0\u3c9d\0\u3cd8\0\u3d13\0\u3d4e\0\u3d89\0\u3dc4\0\u3dff"+
    "\0\u3e3a\0\u3e75\0\u3eb0\0\u3eeb\0\u3f26\0\u3f61\0\u3f9c\0\u3fd7"+
    "\0\u4012\0\u404d\0\u4088\0\u40c3\0\u40fe\0\u4139\0\u4174\0\u41af"+
    "\0\u41ea\0\u4225\0\u04d7\0\u4260\0\u429b\0\u42d6\0\u4311\0\u434c"+
    "\0\u4387\0\u43c2\0\u43fd\0\u4438\0\u4473\0\u44ae\0\u44e9\0\u4524"+
    "\0\u455f\0\u459a\0\u45d5\0\u4610\0\u464b\0\u4686\0\u46c1\0\u46fc"+
    "\0\u4737\0\u4772\0\u47ad\0\u47e8\0\u4823\0\u485e\0\u4899\0\u48d4"+
    "\0\u490f\0\u494a\0\u4985\0\u49c0\0\u49fb\0\u4a36\0\u4a71\0\u4aac"+
    "\0\u4ae7\0\u4b22\0\u4b5d\0\u4b98\0\u4bd3\0\u4c0e\0\u4c49\0\u4c84"+
    "\0\u4cbf\0\u4cfa\0\u4d35\0\u4d70\0\u4dab\0\u4de6\0\u4e21\0\u4e5c"+
    "\0\u4e97\0\u4ed2\0\u4f0d\0\u4f48\0\u4f83\0\u4fbe\0\u4ff9\0\u5034"+
    "\0\u506f\0\u50aa\0\u50e5\0\u5120\0\u515b\0\u5196\0\u51d1\0\u520c"+
    "\0\u5247\0\u5282\0\u52bd\0\u52f8\0\u5333\0\u536e\0\u53a9\0\u53e4"+
    "\0\u541f\0\u545a\0\u5495\0\u54d0\0\u550b\0\u5546\0\u5581\0\u55bc"+
    "\0\u55f7\0\u5632\0\u566d\0\u56a8\0\u56e3\0\u571e\0\u5759\0\u5794"+
    "\0\u57cf\0\u580a\0\u5845\0\u5880\0\u58bb\0\u58f6\0\u5931\0\u596c"+
    "\0\u59a7\0\u59e2\0\u5a1d\0\u5a58\0\u5a93\0\u5ace\0\u04d7\0\166"+
    "\0\u5b09\0\u5b44\0\u5b7f\0\u5bba\0\u5bf5\0\u5c30\0\u5c6b\0\u5ca6"+
    "\0\u5ce1\0\u5d1c\0\u04d7\0\u5d57\0\166\0\u5d92\0\u5dcd\0\u5e08"+
    "\0\u5e43\0\u5e7e\0\u5eb9\0\u5ef4\0\u5f2f\0\u5f6a\0\u5fa5\0\u5fe0"+
    "\0\u601b\0\u6056\0\u6091\0\u60cc\0\u6107\0\u6142\0\u617d\0\u61b8"+
    "\0\u61f3\0\u622e\0\u6269\0\u62a4\0\u04d7\0\u04d7\0\166\0\u62df"+
    "\0\u631a\0\u6355\0\u6390\0\u63cb\0\u6406\0\u6441\0\u647c\0\u64b7"+
    "\0\u64f2\0\u652d\0\u6568\0\u65a3\0\u65de\0\u6619\0\u6654\0\u668f"+
    "\0\u66ca\0\u6705\0\u6740\0\u677b\0\u67b6\0\u652d\0\u67f1\0\u682c"+
    "\0\u6867\0\u68a2\0\u68dd\0\u6918\0\u6953\0\u698e\0\u69c9\0\u6a04"+
    "\0\u6a3f\0\u6a7a\0\u6ab5\0\u6af0\0\u6b2b\0\u6b66\0\u6ba1\0\u6bdc"+
    "\0\u6c17\0\u6c52\0\u6c8d\0\u6cc8\0\u6d03\0\u6d3e\0\u6d79\0\u6db4"+
    "\0\u6def\0\u6e2a\0\u6e65\0\u6ea0\0\u6edb\0\u6f16\0\u6f51\0\u6f8c"+
    "\0\u6fc7\0\u7002\0\u703d\0\u7078\0\u70b3\0\u70ee\0\u7129\0\u7164"+
    "\0\u719f\0\u71da\0\u7215\0\u7250\0\u728b\0\u72c6\0\u7301\0\u733c"+
    "\0\u7377\0\u73b2\0\u73ed\0\u7428\0\u7463\0\u749e\0\u74d9\0\u7514"+
    "\0\u754f\0\u758a\0\u75c5\0\u7600\0\u763b\0\u7676\0\u76b1\0\u76ec"+
    "\0\u7727\0\u7762\0\u779d\0\u77d8\0\u7813\0\u784e\0\u7889\0\u78c4"+
    "\0\u78ff\0\u793a\0\u7975\0\u79b0\0\u79eb\0\u7a26\0\u04d7\0\166"+
    "\0\u04d7\0\u7a61\0\u7a9c\0\u04d7\0\166\0\u7ad7\0\u7b12\0\u7b4d"+
    "\0\u7b88\0\u7bc3\0\u7bfe\0\u7c39\0\u7c74\0\u7caf\0\u7cea\0\u7d25"+
    "\0\u7d60\0\u7d9b\0\u04d7\0\u7dd6\0\u7e11\0\u7e4c\0\u7e87\0\u7ec2"+
    "\0\u7efd\0\u7f38\0\u7f73\0\u7fae\0\u7fe9\0\u8024\0\u805f\0\u809a"+
    "\0\u80d5\0\u8110\0\u814b\0\u8186\0\u81c1\0\u81fc\0\u8237\0\u8272"+
    "\0\u82ad\0\u82e8\0\u8323\0\u835e\0\u8399\0\u83d4\0\u840f\0\u844a"+
    "\0\u8485\0\u84c0\0\u84fb\0\u8536\0\u8571\0\u85ac\0\u85e7\0\u8622"+
    "\0\u865d\0\u8698\0\u86d3\0\u870e\0\u8749\0\u8784\0\u87bf\0\u87fa"+
    "\0\u8835\0\u8870\0\u88ab\0\u88e6\0\u8921\0\u895c\0\u8997\0\u89d2"+
    "\0\u8a0d\0\u8a48\0\u8a83\0\u8abe\0\u8af9\0\u8b34\0\u8b6f\0\u8baa"+
    "\0\u8be5\0\u8c20\0\u8c5b\0\u8c96\0\u8cd1\0\u8d0c\0\u8d47\0\u8d82"+
    "\0\u8dbd\0\u8df8\0\u8e33\0\u8e6e\0\u8ea9\0\u8ee4\0\u8f1f\0\u8f5a"+
    "\0\u8f95\0\u8fd0\0\u900b\0\u9046\0\u9081\0\u90bc\0\u90f7\0\u9132"+
    "\0\u916d\0\u91a8\0\u91e3\0\u921e\0\u9259\0\u9294\0\u92cf\0\u930a"+
    "\0\u9345\0\u9380\0\u93bb\0\u93f6\0\u9431\0\u946c\0\u94a7\0\u94e2"+
    "\0\u951d\0\u9558\0\u9593\0\u95ce\0\u9609\0\u9644\0\u967f\0\u96ba"+
    "\0\u04d7\0\u96f5\0\u04d7\0\u9730\0\u976b\0\u04d7\0\u97a6\0\u97e1"+
    "\0\u981c\0\u9857\0\u9892\0\u98cd\0\u9908\0\u9943\0\u997e\0\u99b9"+
    "\0\u99f4\0\u9a2f\0\u04d7\0\u9a6a\0\u9aa5\0\u04d7\0\u9ae0\0\u9b1b"+
    "\0\u9b56\0\u9b91\0\u9bcc\0\u04d7\0\166\0\u9c07\0\u9c42\0\u9c7d"+
    "\0\u9cb8\0\u9cf3\0\u9d2e\0\u9d69\0\u9da4\0\u9ddf\0\u9e1a\0\u9e55"+
    "\0\u9e90\0\u9ecb\0\u9f06\0\u9f41\0\u9f7c\0\u9fb7\0\u9ff2\0\ua02d"+
    "\0\ua068\0\ua0a3\0\ua0de\0\ua119\0\ua154\0\ua18f\0\ua1ca\0\ua205"+
    "\0\ua240\0\ua27b\0\ua2b6\0\ua2f1\0\ua32c\0\ua367\0\ua3a2\0\ua3dd"+
    "\0\ua418\0\ua453\0\ua48e\0\ua4c9\0\ua504\0\ua53f\0\ua57a\0\ua5b5"+
    "\0\ua5f0\0\ua62b\0\ua666\0\ua6a1\0\ua6dc\0\ua717\0\ua752\0\ua78d"+
    "\0\ua7c8\0\ua803\0\ua83e\0\ua879\0\ua8b4\0\ua8ef\0\ua92a\0\ua965"+
    "\0\ua9a0\0\ua9db\0\uaa16\0\uaa51\0\uaa8c\0\uaac7\0\uab02\0\uab3d"+
    "\0\uab78\0\uabb3\0\uabee\0\uac29\0\uac64\0\uac9f\0\uacda\0\uad15"+
    "\0\uad50\0\uad8b\0\uadc6\0\uae01\0\uae3c\0\uae77\0\u04d7\0\u04d7"+
    "\0\166\0\uaeb2\0\uaeed\0\u04d7\0\166\0\u04d7\0\166\0\uaf28"+
    "\0\uaf63\0\u04d7\0\166\0\uaf9e\0\u04d7\0\166\0\uafd9\0\ub014"+
    "\0\ub04f\0\ub08a\0\ub0c5\0\ub100\0\u04d7\0\ub13b\0\ub176\0\ub1b1"+
    "\0\ub1ec\0\ub227\0\ub262\0\ub29d\0\ub2d8\0\ub313\0\ub34e\0\ub389"+
    "\0\ub3c4\0\ub3ff\0\ub43a\0\ub475\0\ub4b0\0\ub4eb\0\ub526\0\ub561"+
    "\0\ub59c\0\ub5d7\0\ub612\0\ub64d\0\ub688\0\ub6c3\0\ub6fe\0\ub739"+
    "\0\ub774\0\ub7af\0\ub7ea\0\ub825\0\ub860\0\ub89b\0\ub8d6\0\ub911"+
    "\0\ub94c\0\ub987\0\ub9c2\0\ub9fd\0\uba38\0\uba73\0\ubaae\0\ubae9"+
    "\0\ubb24\0\ubb5f\0\ubb9a\0\ubbd5\0\ubc10\0\ubc4b\0\ubc86\0\ubcc1"+
    "\0\ubcfc\0\ubd37\0\ubd72\0\ubdad\0\ubde8\0\ube23\0\ube5e\0\ube99"+
    "\0\ubed4\0\ubf0f\0\ubf4a\0\ubf85\0\ubfc0\0\ubffb\0\uc036\0\uc071"+
    "\0\uc0ac\0\uc0e7\0\uc122\0\uc15d\0\uc198\0\uc1d3\0\uc20e\0\uc249"+
    "\0\uc284\0\uc2bf\0\uc2fa\0\uc335\0\uc370\0\uc3ab\0\uc3e6\0\uc421"+
    "\0\uc45c\0\uc497\0\uc4d2\0\uc50d\0\uc548\0\uc583\0\uc5be\0\uc5f9"+
    "\0\uc634\0\uc66f\0\uc6aa\0\uc6e5\0\uc720\0\uc75b\0\uc796\0\uc7d1"+
    "\0\uc80c\0\uc847\0\uc882\0\uc8bd\0\uc8f8\0\uc933\0\uc96e\0\uc9a9"+
    "\0\uc9e4\0\uca1f\0\uca5a\0\uca95\0\ucad0\0\ucb0b\0\ucb46\0\ucb81"+
    "\0\ucbbc\0\u04d7\0\166\0\u04d7\0\166\0\u04d7\0\166\0\u04d7"+
    "\0\166\0\ucbf7\0\ucc32\0\ucc6d\0\ucca8\0\ucce3\0\ucd1e\0\ucd59"+
    "\0\ucd94\0\ucdcf\0\uce0a\0\uce45\0\uce80\0\ucebb\0\ucef6\0\ucf31"+
    "\0\ucf6c\0\ucfa7\0\ucfe2\0\ud01d\0\ud058\0\ud093\0\ud0ce\0\ud109"+
    "\0\ud144\0\ud17f\0\ud1ba\0\ud1f5\0\ud230\0\u04d7\0\166\0\ud26b"+
    "\0\ud2a6\0\ud2e1\0\ud31c\0\ud357\0\ud392\0\ud3cd\0\ud408\0\ud443"+
    "\0\ud47e\0\ud4b9\0\ud4f4\0\ud52f\0\ud56a\0\ud5a5\0\ud5e0\0\ud61b"+
    "\0\ud656\0\ud691\0\ud6cc\0\ud707\0\ud742\0\ud77d\0\ud7b8\0\ud7f3"+
    "\0\ud82e\0\ud869\0\ud8a4\0\ud8df\0\ud91a\0\ud955\0\ud990\0\ud9cb"+
    "\0\uda06\0\uda41\0\uda7c\0\udab7\0\udaf2\0\udb2d\0\udb68\0\udba3"+
    "\0\udbde\0\udc19\0\udc54\0\udc8f\0\udcca\0\udd05\0\udd40\0\udd7b"+
    "\0\uddb6\0\uddf1\0\ude2c\0\ua62b\0\ude67\0\udea2\0\udedd\0\udf18"+
    "\0\udf53\0\udf8e";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[1050];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\2\40\1\41\4\40"+
    "\1\42\1\43\2\40\1\44\1\45\1\46\1\40\1\47"+
    "\1\50\3\40\1\51\1\3\1\52\1\40\1\53\1\54"+
    "\1\55\1\56\1\57\1\3\2\60\1\61\1\62\17\60"+
    "\1\3\1\60\1\63\45\60\74\0\1\4\73\0\1\5"+
    "\114\0\1\64\46\0\2\10\2\0\1\10\1\65\54\10"+
    "\1\66\10\10\7\0\1\67\75\0\1\70\4\0\1\71"+
    "\71\0\1\72\1\0\2\24\34\0\1\73\32\0\1\72"+
    "\1\0\2\24\75\0\1\74\72\0\1\75\72\0\1\76"+
    "\75\0\1\77\1\100\1\101\1\102\1\103\1\104\1\105"+
    "\1\106\1\107\1\110\1\111\1\112\1\113\1\114\1\0"+
    "\1\115\1\0\1\116\1\117\1\120\1\121\1\0\1\122"+
    "\12\0\1\107\1\117\1\111\20\0\2\40\5\0\21\40"+
    "\1\123\10\40\3\0\1\40\26\0\2\40\5\0\16\40"+
    "\1\124\2\40\1\125\10\40\3\0\1\40\26\0\2\40"+
    "\5\0\1\126\6\40\1\127\6\40\1\130\13\40\3\0"+
    "\1\40\26\0\2\40\5\0\4\40\1\131\25\40\3\0"+
    "\1\40\26\0\2\40\5\0\13\40\1\132\1\40\1\133"+
    "\7\40\1\134\4\40\3\0\1\40\26\0\2\40\5\0"+
    "\16\40\1\135\5\40\1\136\5\40\3\0\1\40\26\0"+
    "\2\40\5\0\32\40\3\0\1\40\26\0\2\40\5\0"+
    "\3\40\1\137\1\40\1\140\15\40\1\141\6\40\3\0"+
    "\1\40\26\0\2\40\5\0\1\142\3\40\1\143\25\40"+
    "\3\0\1\40\26\0\2\40\5\0\15\40\1\144\14\40"+
    "\3\0\1\40\26\0\2\40\5\0\4\40\1\145\11\40"+
    "\1\146\13\40\3\0\1\40\26\0\2\40\5\0\4\40"+
    "\1\147\14\40\1\150\2\40\1\151\3\40\1\152\1\40"+
    "\3\0\1\40\26\0\2\40\5\0\4\40\1\153\14\40"+
    "\1\154\6\40\1\155\1\40\3\0\1\40\26\0\2\40"+
    "\5\0\1\156\31\40\3\0\1\40\26\0\2\40\5\0"+
    "\7\40\1\157\22\40\3\0\1\40\6\0\2\160\2\0"+
    "\57\160\1\0\7\160\66\0\1\161\36\0\1\162\1\0"+
    "\1\163\15\0\1\164\53\0\1\165\14\0\1\166\2\0"+
    "\1\167\3\0\1\170\13\0\2\60\2\0\17\60\1\0"+
    "\1\60\1\0\45\60\2\0\1\61\70\0\2\10\2\0"+
    "\67\10\12\70\1\171\60\70\2\71\2\0\67\71\20\0"+
    "\2\172\71\0\2\173\5\0\6\173\65\0\1\174\1\175"+
    "\1\0\1\176\1\0\1\177\13\0\1\200\1\0\1\201"+
    "\73\0\1\202\46\0\1\203\6\0\1\204\3\0\1\205"+
    "\2\0\1\206\2\0\1\207\51\0\1\210\1\0\1\211"+
    "\1\0\1\212\3\0\1\213\10\0\1\214\6\0\1\215"+
    "\10\0\1\213\31\0\1\216\4\0\1\217\7\0\1\220"+
    "\2\0\1\221\6\0\1\222\43\0\1\223\15\0\1\224"+
    "\54\0\1\225\3\0\1\226\76\0\1\227\5\0\1\230"+
    "\22\0\1\227\54\0\1\231\47\0\1\232\72\0\1\233"+
    "\7\0\1\234\30\0\1\234\35\0\1\235\11\0\1\236"+
    "\60\0\1\237\11\0\1\240\5\0\1\241\64\0\1\242"+
    "\1\243\53\0\1\244\3\0\1\245\3\0\1\246\10\0"+
    "\1\247\17\0\1\246\35\0\1\250\72\0\1\251\2\0"+
    "\1\252\2\0\1\253\1\0\1\254\2\0\1\255\3\0"+
    "\1\256\1\257\16\0\1\253\27\0\1\260\7\0\1\261"+
    "\5\0\1\262\2\0\1\263\17\0\1\261\46\0\1\264"+
    "\4\0\1\265\17\0\1\265\30\0\1\266\63\0\2\40"+
    "\5\0\4\40\1\267\25\40\3\0\1\40\26\0\2\40"+
    "\5\0\24\40\1\270\5\40\3\0\1\40\26\0\2\40"+
    "\5\0\4\40\1\271\25\40\3\0\1\40\26\0\2\40"+
    "\5\0\23\40\1\272\6\40\3\0\1\40\26\0\2\40"+
    "\5\0\1\273\31\40\3\0\1\40\26\0\2\40\5\0"+
    "\15\40\1\274\14\40\3\0\1\40\26\0\2\40\5\0"+
    "\5\40\1\275\14\40\1\276\7\40\3\0\1\40\4\0"+
    "\1\277\21\0\2\40\5\0\22\40\1\300\7\40\3\0"+
    "\1\40\4\0\1\301\21\0\2\40\5\0\3\40\1\302"+
    "\26\40\3\0\1\40\26\0\2\40\5\0\1\303\3\40"+
    "\1\304\25\40\3\0\1\40\26\0\2\40\5\0\21\40"+
    "\1\305\10\40\3\0\1\40\26\0\2\40\5\0\15\40"+
    "\1\306\14\40\3\0\1\40\26\0\2\40\5\0\4\40"+
    "\1\307\25\40\3\0\1\40\26\0\2\40\5\0\14\40"+
    "\1\310\15\40\3\0\1\40\26\0\2\40\5\0\26\40"+
    "\1\311\3\40\3\0\1\40\26\0\2\40\5\0\6\40"+
    "\1\312\14\40\1\313\6\40\3\0\1\40\26\0\2\40"+
    "\5\0\16\40\1\314\13\40\3\0\1\40\26\0\2\40"+
    "\5\0\21\40\1\315\10\40\3\0\1\40\26\0\2\40"+
    "\5\0\2\40\1\316\27\40\3\0\1\40\26\0\2\40"+
    "\5\0\1\40\1\317\30\40\3\0\1\40\26\0\2\40"+
    "\5\0\22\40\1\320\7\40\3\0\1\40\4\0\1\321"+
    "\21\0\2\40\5\0\14\40\1\322\15\40\3\0\1\40"+
    "\26\0\2\40\5\0\30\40\1\323\1\40\3\0\1\40"+
    "\26\0\2\40\5\0\17\40\1\324\12\40\3\0\1\40"+
    "\26\0\2\40\5\0\13\40\1\325\16\40\3\0\1\40"+
    "\26\0\2\40\5\0\10\40\1\326\21\40\3\0\1\40"+
    "\3\0\1\327\2\0\2\160\2\0\57\160\1\330\7\160"+
    "\33\0\1\331\107\0\1\332\53\0\1\333\71\0\1\334"+
    "\113\0\1\321\17\0\1\321\1\0\12\70\1\171\4\70"+
    "\1\335\53\70\27\0\1\336\110\0\1\337\57\0\1\340"+
    "\101\0\1\341\10\0\1\342\17\0\1\341\50\0\1\343"+
    "\74\0\1\344\77\0\1\345\55\0\1\346\5\0\1\347"+
    "\51\0\1\350\102\0\1\351\30\0\1\351\45\0\1\352"+
    "\1\353\61\0\1\354\3\0\1\355\30\0\1\355\45\0"+
    "\1\356\71\0\1\357\57\0\1\360\12\0\1\340\6\0"+
    "\1\361\17\0\1\361\52\0\1\362\17\0\1\362\40\0"+
    "\1\363\5\0\1\364\22\0\1\363\35\0\1\345\111\0"+
    "\1\345\54\0\1\365\110\0\1\366\1\0\1\367\71\0"+
    "\1\370\56\0\1\216\6\0\1\371\21\0\1\216\41\0"+
    "\1\372\2\0\1\373\1\374\24\0\1\372\44\0\1\375"+
    "\67\0\1\376\30\0\1\376\54\0\1\377\72\0\1\u0100"+
    "\73\0\1\u0101\52\0\1\u0102\76\0\1\u0103\30\0\1\u0103"+
    "\52\0\1\u0104\64\0\1\372\104\0\1\u0105\45\0\1\u0106"+
    "\5\0\1\u0107\100\0\1\u0108\102\0\1\u0109\67\0\1\u010a"+
    "\74\0\1\u010b\51\0\1\u010c\111\0\1\u010d\6\0\1\u010e"+
    "\63\0\1\u010f\1\0\1\u0110\51\0\1\u0111\74\0\1\u0112"+
    "\11\0\1\u0113\56\0\1\u0114\1\u0115\2\0\1\u0116\6\0"+
    "\1\u0117\4\0\1\u0118\2\0\1\u0119\14\0\1\u0118\34\0"+
    "\1\u011a\6\0\1\u011b\1\0\1\u011c\65\0\1\u011d\30\0"+
    "\1\u011d\41\0\1\u011e\30\0\1\u011e\35\0\1\u011f\66\0"+
    "\1\u0120\3\0\1\u0121\66\0\1\u0122\3\0\1\u0123\11\0"+
    "\1\u0124\2\0\1\u0125\53\0\1\u0126\111\0\1\u0127\65\0"+
    "\1\366\64\0\1\u0128\7\0\1\u0129\54\0\1\u012a\76\0"+
    "\1\u012b\72\0\1\u012c\76\0\1\216\30\0\1\216\22\0"+
    "\2\40\5\0\1\u012d\31\40\3\0\1\40\26\0\2\40"+
    "\5\0\15\40\1\u012e\14\40\3\0\1\40\26\0\2\40"+
    "\5\0\1\u012f\31\40\3\0\1\40\26\0\2\40\5\0"+
    "\4\40\1\u0130\25\40\3\0\1\40\26\0\2\40\5\0"+
    "\21\40\1\u0131\10\40\3\0\1\40\26\0\2\40\5\0"+
    "\23\40\1\u0132\6\40\3\0\1\40\26\0\2\40\5\0"+
    "\15\40\1\u0133\14\40\3\0\1\40\26\0\2\40\5\0"+
    "\2\40\1\u0134\27\40\3\0\1\40\37\0\1\u0135\61\0"+
    "\2\40\5\0\4\40\1\u0136\25\40\3\0\1\40\41\0"+
    "\1\u0137\57\0\2\40\5\0\5\40\1\u0138\2\40\1\u0139"+
    "\15\40\1\u013a\3\40\3\0\1\40\3\0\1\u013b\22\0"+
    "\2\40\5\0\13\40\1\316\16\40\3\0\1\40\26\0"+
    "\2\40\5\0\15\40\1\u013c\14\40\3\0\1\40\26\0"+
    "\2\40\5\0\2\40\1\u013d\5\40\1\u013e\6\40\1\u013f"+
    "\12\40\3\0\1\40\3\0\1\u0140\22\0\2\40\5\0"+
    "\2\40\1\u0141\27\40\3\0\1\40\26\0\2\40\5\0"+
    "\14\40\1\u0142\15\40\3\0\1\40\26\0\2\40\5\0"+
    "\4\40\1\u0143\25\40\3\0\1\40\26\0\2\40\5\0"+
    "\3\40\1\u0144\4\40\1\u0145\21\40\3\0\1\40\3\0"+
    "\1\u0146\22\0\2\40\5\0\10\40\1\u0147\21\40\3\0"+
    "\1\40\3\0\1\u0148\22\0\2\40\5\0\24\40\1\u0149"+
    "\5\40\3\0\1\40\26\0\2\40\5\0\14\40\1\u014a"+
    "\15\40\3\0\1\40\26\0\2\40\5\0\25\40\1\316"+
    "\4\40\3\0\1\40\26\0\2\40\5\0\22\40\1\u014b"+
    "\7\40\3\0\1\40\4\0\1\u014c\21\0\2\40\5\0"+
    "\14\40\1\u014d\15\40\3\0\1\40\51\0\1\u014e\47\0"+
    "\2\40\5\0\17\40\1\u014f\12\40\3\0\1\40\26\0"+
    "\2\40\5\0\22\40\1\u0150\7\40\3\0\1\40\4\0"+
    "\1\u0151\21\0\2\40\5\0\4\40\1\u0152\25\40\3\0"+
    "\1\40\26\0\2\40\5\0\24\40\1\u0153\5\40\3\0"+
    "\1\40\26\0\2\40\5\0\13\40\1\u0154\16\40\3\0"+
    "\1\40\50\0\1\u0155\73\0\1\u0156\103\0\1\333\67\0"+
    "\1\u014c\17\0\1\u014c\54\0\1\u0157\67\0\1\216\65\0"+
    "\1\u0158\1\0\1\u0159\2\0\1\u015a\4\0\1\u015b\60\0"+
    "\1\u015c\62\0\1\u015d\104\0\1\u015e\54\0\1\u015f\105\0"+
    "\1\u0160\104\0\1\u0161\66\0\1\u0162\53\0\1\u0163\1\0"+
    "\1\u0164\12\0\1\u0165\54\0\1\u0166\15\0\1\u0167\76\0"+
    "\1\u0168\47\0\1\u0169\106\0\1\u016a\56\0\1\u016b\102\0"+
    "\1\u015f\30\0\1\u015f\54\0\1\u016c\72\0\1\u016d\63\0"+
    "\1\u016e\73\0\1\u0163\74\0\1\u016f\57\0\1\u0170\72\0"+
    "\1\u0171\76\0\1\u0172\30\0\1\u0172\41\0\1\u0173\30\0"+
    "\1\u0173\33\0\1\u0174\10\0\1\u0175\72\0\1\345\72\0"+
    "\1\u0176\63\0\1\u0177\101\0\1\u0178\74\0\1\345\64\0"+
    "\1\266\65\0\1\u0179\5\0\1\u017a\3\0\1\u017b\2\0"+
    "\1\u017c\1\0\1\u017d\1\0\1\u017e\15\0\1\u017a\53\0"+
    "\1\u017f\17\0\1\u017f\44\0\1\u0180\71\0\1\u0181\73\0"+
    "\1\u0182\62\0\1\372\71\0\1\345\77\0\1\376\5\0"+
    "\1\u0183\22\0\1\376\47\0\1\u0184\71\0\1\216\60\0"+
    "\1\u0185\105\0\1\u0186\54\0\1\u0187\6\0\1\u0188\3\0"+
    "\1\u0189\5\0\1\u018a\1\u018b\17\0\1\u018b\53\0\1\u018c"+
    "\55\0\1\u018d\106\0\1\u018e\17\0\1\u018e\33\0\1\u018f"+
    "\15\0\1\u0190\63\0\1\u0191\30\0\1\u0191\51\0\1\u0192"+
    "\17\0\1\u0192\35\0\1\u0193\71\0\1\u0194\72\0\1\u0181"+
    "\72\0\1\u0195\3\0\1\u0196\6\0\1\u0165\21\0\1\u0196"+
    "\31\0\1\u0197\110\0\1\u0198\5\0\1\u0199\52\0\1\u019a"+
    "\70\0\1\u019b\4\0\1\u019c\12\0\1\u019d\17\0\1\u019d"+
    "\34\0\1\u019e\6\0\1\345\62\0\1\u019f\106\0\1\u01a0"+
    "\66\0\1\u01a1\72\0\1\216\105\0\1\376\57\0\1\u01a2"+
    "\100\0\1\216\1\0\1\u0177\66\0\1\u01a3\72\0\1\345"+
    "\71\0\1\u01a4\56\0\1\u01a5\76\0\1\u01a6\72\0\1\u01a7"+
    "\77\0\1\u01a8\62\0\1\u01a9\107\0\1\u01aa\72\0\1\u01ab"+
    "\1\u01ac\42\0\2\40\5\0\3\40\1\u01ad\26\40\3\0"+
    "\1\40\26\0\2\40\5\0\2\40\1\u01ae\27\40\3\0"+
    "\1\40\26\0\2\40\5\0\12\40\1\u01af\17\40\3\0"+
    "\1\40\5\0\1\u01b0\20\0\2\40\5\0\6\40\1\u01b1"+
    "\23\40\3\0\1\40\26\0\2\40\5\0\3\40\1\u01b2"+
    "\26\40\3\0\1\40\26\0\2\40\5\0\10\40\1\u01b3"+
    "\21\40\3\0\1\40\3\0\1\u01b4\22\0\2\40\5\0"+
    "\1\u01b5\31\40\3\0\1\40\26\0\2\40\5\0\21\40"+
    "\1\u01b6\10\40\3\0\1\40\56\0\1\u01b7\42\0\2\40"+
    "\5\0\10\40\1\u01b8\21\40\3\0\1\40\3\0\1\u01b9"+
    "\41\0\1\u01b9\30\0\1\u01b9\22\0\2\40\5\0\16\40"+
    "\1\u01ba\13\40\3\0\1\40\26\0\2\40\5\0\5\40"+
    "\1\u01bb\24\40\3\0\1\40\26\0\2\40\5\0\7\40"+
    "\1\u01bc\22\40\3\0\1\40\42\0\1\u01bd\56\0\2\40"+
    "\5\0\23\40\1\u01be\6\40\3\0\1\40\26\0\2\40"+
    "\5\0\7\40\1\u01bf\3\40\1\u01c0\16\40\3\0\1\40"+
    "\26\0\2\40\5\0\23\40\1\u01c1\6\40\3\0\1\40"+
    "\26\0\2\40\5\0\13\40\1\u01c2\16\40\3\0\1\40"+
    "\60\0\1\u01c3\40\0\2\40\5\0\23\40\1\u01c4\6\40"+
    "\3\0\1\40\26\0\2\40\5\0\3\40\1\u01c5\26\40"+
    "\3\0\1\40\26\0\2\40\5\0\24\40\1\u01c6\5\40"+
    "\3\0\1\40\26\0\2\40\5\0\23\40\1\u01c7\6\40"+
    "\3\0\1\40\60\0\1\u01c8\40\0\2\40\5\0\16\40"+
    "\1\u01c9\13\40\3\0\1\40\53\0\1\u01ca\45\0\2\40"+
    "\5\0\21\40\1\u01cb\10\40\3\0\1\40\26\0\2\40"+
    "\5\0\3\40\1\u01cc\26\40\3\0\1\40\26\0\2\40"+
    "\5\0\4\40\1\u01cd\25\40\3\0\1\40\41\0\1\u01ce"+
    "\57\0\2\40\5\0\4\40\1\u01cf\25\40\3\0\1\40"+
    "\41\0\1\u01d0\57\0\2\40\5\0\13\40\1\u01d1\16\40"+
    "\3\0\1\40\26\0\2\40\5\0\21\40\1\u01d2\10\40"+
    "\3\0\1\40\56\0\1\u01d3\42\0\2\40\5\0\3\40"+
    "\1\u01d4\26\40\3\0\1\40\26\0\2\40\5\0\4\40"+
    "\1\u01d5\25\40\3\0\1\40\26\0\2\40\5\0\4\40"+
    "\1\u01d6\25\40\3\0\1\40\41\0\1\u01d7\71\0\1\u01d8"+
    "\104\0\1\u01d9\101\0\1\u01da\47\0\1\u01db\75\0\1\u01dc"+
    "\75\0\1\u01dd\101\0\1\u01de\75\0\1\u01df\77\0\1\u01e0"+
    "\46\0\1\u0163\76\0\1\u01e1\70\0\1\u01e2\66\0\1\u01e3"+
    "\1\0\1\u01e4\1\u01df\16\0\1\u01e5\1\u01e6\16\0\1\u01e5"+
    "\42\0\1\345\30\0\1\345\44\0\1\u01e7\61\0\1\u01e8"+
    "\66\0\1\u01e9\105\0\1\u01ea\63\0\1\u01eb\111\0\1\u01ec"+
    "\57\0\1\u01ed\30\0\1\u01ed\37\0\1\215\73\0\1\u01ee"+
    "\104\0\1\u01ef\67\0\1\240\72\0\1\u01f0\56\0\1\u01f1"+
    "\111\0\1\345\72\0\1\u01f2\70\0\1\u01f3\62\0\1\u01f4"+
    "\67\0\1\u01f5\76\0\1\u01f6\30\0\1\u01f6\33\0\1\u0174"+
    "\106\0\1\u01f7\63\0\1\u01f8\71\0\1\u01f9\74\0\1\u01fa"+
    "\30\0\1\u01fa\31\0\1\u01fb\76\0\1\u01fc\107\0\1\202"+
    "\55\0\1\u01fd\66\0\1\u01fe\1\100\1\u01ff\1\u0200\1\u0201"+
    "\1\u0202\6\0\1\u0203\2\0\1\u0204\2\0\1\u0205\1\u0206"+
    "\1\u0207\15\0\1\u0205\34\0\1\u0106\66\0\1\u0177\116\0"+
    "\1\216\67\0\1\u0208\55\0\1\u0209\110\0\1\u020a\17\0"+
    "\1\u020a\32\0\1\u020b\74\0\1\u020c\104\0\1\u020d\60\0"+
    "\1\u020e\72\0\1\u020f\12\0\1\u0210\103\0\1\u0211\60\0"+
    "\1\u0212\72\0\1\u0213\60\0\1\u0214\72\0\1\u0215\112\0"+
    "\1\u0216\65\0\1\u0217\3\0\1\u0218\57\0\1\u0219\30\0"+
    "\1\u0219\41\0\1\u021a\30\0\1\u021a\46\0\1\u021b\73\0"+
    "\1\u021c\70\0\1\215\102\0\1\u021d\67\0\1\u021e\51\0"+
    "\1\372\113\0\1\u021f\61\0\1\u0220\30\0\1\u0220\46\0"+
    "\1\u0221\57\0\1\216\107\0\1\u0222\110\0\1\u0223\50\0"+
    "\1\u0224\72\0\1\u0225\101\0\1\u0226\17\0\1\u0226\42\0"+
    "\1\215\30\0\1\215\33\0\1\u01fa\72\0\1\u0227\11\0"+
    "\1\u0228\67\0\1\u0229\102\0\1\u022a\53\0\1\u022b\112\0"+
    "\1\u022a\72\0\1\357\47\0\1\u022c\1\u022d\1\0\1\u022e"+
    "\1\0\1\u022f\3\0\1\u0230\1\0\1\u0231\3\0\1\u0232"+
    "\1\0\1\u0233\1\0\1\u0234\1\u0235\1\u0236\13\0\1\u0233"+
    "\1\u0230\20\0\2\40\5\0\4\40\1\u0237\25\40\3\0"+
    "\1\40\26\0\2\40\5\0\4\40\1\316\25\40\3\0"+
    "\1\40\26\0\2\40\5\0\16\40\1\u0238\13\40\3\0"+
    "\1\40\26\0\2\40\5\0\4\40\1\u0239\25\40\3\0"+
    "\1\40\26\0\2\40\5\0\15\40\1\u023a\14\40\3\0"+
    "\1\40\52\0\1\u023b\46\0\2\40\5\0\14\40\1\u023c"+
    "\15\40\3\0\1\40\26\0\2\40\5\0\10\40\1\u023d"+
    "\21\40\3\0\1\40\3\0\1\u023e\41\0\1\u023e\30\0"+
    "\1\u023e\22\0\2\40\5\0\5\40\1\u023f\24\40\3\0"+
    "\1\40\42\0\1\u0240\56\0\2\40\5\0\21\40\1\u0241"+
    "\10\40\3\0\1\40\26\0\2\40\5\0\10\40\1\u0242"+
    "\21\40\3\0\1\40\3\0\1\u0243\22\0\2\40\5\0"+
    "\22\40\1\u0244\7\40\3\0\1\40\4\0\1\u0245\21\0"+
    "\2\40\5\0\1\u0246\31\40\3\0\1\40\26\0\2\40"+
    "\5\0\10\40\1\u0247\21\40\3\0\1\40\3\0\1\u0248"+
    "\22\0\2\40\5\0\4\40\1\u0249\25\40\3\0\1\40"+
    "\26\0\2\40\5\0\1\u024a\31\40\3\0\1\40\41\0"+
    "\1\u024b\57\0\2\40\5\0\10\40\1\u024c\21\40\3\0"+
    "\1\40\3\0\1\u024d\22\0\2\40\5\0\4\40\1\u024e"+
    "\25\40\3\0\1\40\26\0\2\40\5\0\17\40\1\u01ae"+
    "\12\40\3\0\1\40\26\0\2\40\5\0\4\40\1\u024f"+
    "\25\40\3\0\1\40\41\0\1\u0250\57\0\2\40\5\0"+
    "\15\40\1\u0251\14\40\3\0\1\40\52\0\1\u0252\46\0"+
    "\2\40\5\0\15\40\1\u0253\14\40\3\0\1\40\26\0"+
    "\2\40\5\0\4\40\1\u0254\25\40\3\0\1\40\26\0"+
    "\2\40\5\0\2\40\1\u0255\27\40\3\0\1\40\37\0"+
    "\1\u0256\61\0\2\40\5\0\22\40\1\u0257\7\40\3\0"+
    "\1\40\4\0\1\u0258\52\0\1\u0258\17\0\1\u0258\21\0"+
    "\2\40\5\0\1\u0259\31\40\3\0\1\40\26\0\2\40"+
    "\5\0\2\40\1\316\22\40\1\316\4\40\3\0\1\40"+
    "\37\0\1\333\22\0\1\333\36\0\2\40\5\0\4\40"+
    "\1\u025a\25\40\3\0\1\40\41\0\1\u025b\112\0\1\u025c"+
    "\61\0\1\u025d\70\0\1\345\64\0\1\u025e\77\0\1\u025f"+
    "\30\0\1\u025f\34\0\1\215\71\0\1\211\110\0\1\u0260"+
    "\76\0\1\u0261\50\0\1\u0262\113\0\1\201\62\0\1\u0263"+
    "\66\0\1\u0264\104\0\1\u0265\74\0\1\u0266\70\0\1\u0267"+
    "\74\0\1\u0268\53\0\1\u0269\115\0\1\u026a\47\0\1\u026b"+
    "\103\0\1\u019a\73\0\1\202\71\0\1\u026c\100\0\1\u026d"+
    "\65\0\1\u026e\77\0\1\u026f\47\0\1\u0270\117\0\1\u0271"+
    "\62\0\1\u0272\103\0\1\u0273\50\0\1\u015f\103\0\1\u0274"+
    "\77\0\1\u0275\17\0\1\u0275\51\0\1\u017e\51\0\1\u0276"+
    "\75\0\1\u0277\74\0\1\u0278\65\0\1\u0279\12\0\1\u0263"+
    "\2\0\1\u027a\2\0\1\u027b\51\0\1\210\1\0\1\211"+
    "\1\0\1\u027c\14\0\1\u027d\71\0\1\221\62\0\1\u027e"+
    "\30\0\1\u027e\35\0\1\237\76\0\1\246\30\0\1\246"+
    "\35\0\1\234\7\0\1\254\2\0\1\u027f\3\0\1\u0280"+
    "\47\0\1\u0281\7\0\1\261\5\0\1\u0282\22\0\1\261"+
    "\46\0\1\264\105\0\1\264\63\0\1\u0283\55\0\1\u0284"+
    "\70\0\1\u0285\20\0\1\u0286\47\0\1\u0287\110\0\1\u0288"+
    "\3\0\1\u0289\17\0\1\u0289\35\0\1\u028a\14\0\1\u028b"+
    "\17\0\1\u028b\34\0\1\u028c\72\0\1\u028d\66\0\1\u028e"+
    "\2\0\1\u028f\4\0\1\u0290\2\0\1\u0291\5\0\1\u0292"+
    "\17\0\1\u0290\44\0\1\u0106\74\0\1\u0293\77\0\1\u0294"+
    "\17\0\1\u0294\43\0\1\u0295\76\0\1\u0296\53\0\1\u0120"+
    "\72\0\1\337\105\0\1\215\104\0\1\u0297\67\0\1\u0298"+
    "\17\0\1\u0298\45\0\1\u0299\76\0\1\u029a\72\0\1\u029b"+
    "\61\0\1\u0197\30\0\1\u0197\34\0\1\u029c\105\0\1\u029d"+
    "\54\0\1\u029e\106\0\1\u0264\5\0\1\u029f\1\u02a0\16\0"+
    "\1\u029f\30\0\1\u02a1\1\0\1\u0174\2\0\1\u02a2\1\u02a3"+
    "\5\0\1\u02a4\2\0\1\u02a5\2\0\1\u02a6\1\u02a7\1\u02a8"+
    "\1\0\1\122\13\0\1\u02a6\31\0\1\u02a9\1\u02aa\1\0"+
    "\1\u02ab\1\u02a2\2\0\1\u02ac\11\0\1\u02ad\1\u02a7\15\0"+
    "\1\u02ac\1\u02ad\53\0\1\u02ae\72\0\1\u02af\64\0\1\u02b0"+
    "\61\0\1\u02b1\76\0\1\u0124\30\0\1\u0124\31\0\1\u02b2"+
    "\1\0\1\u02b3\114\0\1\u02b4\55\0\1\u02b5\112\0\1\u02b6"+
    "\67\0\1\u02b7\67\0\1\u02b8\51\0\1\u02b9\116\0\1\u02ba"+
    "\60\0\1\u02bb\4\0\1\u02bc\3\0\1\u02bd\17\0\1\u02bb"+
    "\42\0\1\u02be\67\0\1\u02bf\30\0\1\u02bf\31\0\1\u02c0"+
    "\63\0\2\40\5\0\5\40\1\u02c1\24\40\3\0\1\40"+
    "\26\0\2\40\5\0\21\40\1\u02c2\10\40\3\0\1\40"+
    "\26\0\2\40\5\0\5\40\1\u02c3\24\40\3\0\1\40"+
    "\26\0\2\40\5\0\24\40\1\u02c4\5\40\3\0\1\40"+
    "\61\0\1\u02c5\37\0\2\40\5\0\4\40\1\u02c6\25\40"+
    "\3\0\1\40\26\0\2\40\5\0\17\40\1\u02c7\12\40"+
    "\3\0\1\40\54\0\1\u02c8\44\0\2\40\5\0\13\40"+
    "\1\u02c9\16\40\3\0\1\40\50\0\1\u02ca\50\0\2\40"+
    "\5\0\21\40\1\u02cb\10\40\3\0\1\40\26\0\2\40"+
    "\5\0\4\40\1\u02cc\25\40\3\0\1\40\41\0\1\u02cd"+
    "\57\0\2\40\5\0\14\40\1\u02ce\15\40\3\0\1\40"+
    "\26\0\2\40\5\0\30\40\1\u02cf\1\40\3\0\1\40"+
    "\51\0\1\u02d0\47\0\2\40\5\0\16\40\1\u02d1\13\40"+
    "\3\0\1\40\53\0\1\u02d2\45\0\2\40\5\0\5\40"+
    "\1\u02d3\24\40\3\0\1\40\26\0\2\40\5\0\14\40"+
    "\1\316\15\40\3\0\1\40\51\0\1\333\47\0\2\40"+
    "\5\0\23\40\1\u02d4\6\40\3\0\1\40\60\0\1\u02d5"+
    "\40\0\2\40\5\0\5\40\1\u02d6\24\40\3\0\1\40"+
    "\26\0\2\40\5\0\23\40\1\u02d7\6\40\3\0\1\40"+
    "\60\0\1\u02d8\40\0\2\40\5\0\22\40\1\u02d9\7\40"+
    "\3\0\1\40\4\0\1\u02da\52\0\1\u02da\17\0\1\u02da"+
    "\21\0\2\40\5\0\23\40\1\u02db\6\40\3\0\1\40"+
    "\26\0\2\40\5\0\5\40\1\u02dc\24\40\3\0\1\40"+
    "\42\0\1\u02dd\107\0\1\u0181\17\0\1\u0181\53\0\1\u02de"+
    "\51\0\1\u02df\113\0\1\u02e0\73\0\1\u02e1\46\0\1\u02e2"+
    "\110\0\1\u02e3\64\0\1\u02e4\30\0\1\u02e4\47\0\1\u02e5"+
    "\54\0\1\u02e6\115\0\1\u02e7\57\0\1\u02e8\30\0\1\u02e8"+
    "\31\0\1\u028e\2\0\1\u02e9\1\u0284\15\0\1\u02ea\17\0"+
    "\1\u02ea\53\0\1\215\72\0\1\u02eb\62\0\1\u02ec\114\0"+
    "\1\u02ed\35\0\1\u028e\20\0\1\u0292\1\0\1\357\64\0"+
    "\1\u0177\61\0\1\u02ee\103\0\1\u016b\61\0\1\u02ef\74\0"+
    "\1\345\70\0\1\u02f0\104\0\1\u027e\76\0\1\345\17\0"+
    "\1\345\32\0\1\u02f1\74\0\1\u02f2\111\0\1\342\70\0"+
    "\1\347\66\0\1\353\61\0\1\u02f3\110\0\1\361\17\0"+
    "\1\361\46\0\1\364\75\0\1\215\55\0\1\234\72\0"+
    "\1\u0124\107\0\1\u02f4\67\0\1\u0129\57\0\1\u02f5\10\0"+
    "\1\u02f6\73\0\1\u0106\61\0\1\u02f7\70\0\1\u02aa\2\0"+
    "\1\u02f8\2\0\1\u02f9\15\0\1\u02fa\12\0\1\u02f9\52\0"+
    "\1\u02fb\63\0\1\u02fc\30\0\1\u02fc\52\0\1\u02fd\73\0"+
    "\1\u02fe\71\0\1\u02ff\64\0\1\u0300\10\0\1\u0301\46\0"+
    "\1\u0302\73\0\1\u0106\77\0\1\u0303\30\0\1\u0303\46\0"+
    "\1\u0304\61\0\1\u0305\72\0\1\u0306\66\0\1\u0307\76\0"+
    "\1\337\72\0\1\u0308\123\0\1\u0309\41\0\1\u030a\111\0"+
    "\1\u030b\53\0\1\u030c\6\0\1\u0291\5\0\1\u030d\53\0"+
    "\1\u030e\74\0\1\u019e\71\0\1\u030f\105\0\1\u0124\73\0"+
    "\1\u0310\76\0\1\u029d\73\0\1\u0311\47\0\1\175\71\0"+
    "\1\u0312\72\0\1\225\72\0\1\u0313\3\0\1\u0314\107\0"+
    "\1\u0315\55\0\1\u0316\16\0\1\u0317\1\257\46\0\1\u0318"+
    "\114\0\1\u0319\17\0\1\u0319\46\0\1\u031a\54\0\1\u02ee"+
    "\77\0\1\217\102\0\1\u031b\61\0\1\u0316\17\0\1\257"+
    "\52\0\1\u031c\70\0\1\u031d\125\0\1\u031e\42\0\1\u031f"+
    "\67\0\1\u0320\103\0\1\u0321\5\0\1\u027b\57\0\1\u0322"+
    "\64\0\1\u0323\115\0\1\u0324\2\0\1\u0325\54\0\1\u0326"+
    "\30\0\1\u0326\54\0\1\u0327\57\0\1\u0328\30\0\1\u0328"+
    "\35\0\1\u0329\76\0\1\u032a\30\0\1\u032a\35\0\1\u032b"+
    "\66\0\1\u032c\115\0\1\u032d\70\0\1\u032e\72\0\1\341"+
    "\42\0\2\40\5\0\30\40\1\u032f\1\40\3\0\1\40"+
    "\26\0\2\40\5\0\4\40\1\u0330\25\40\3\0\1\40"+
    "\41\0\1\u0331\57\0\2\40\5\0\23\40\1\u0332\6\40"+
    "\3\0\1\40\60\0\1\u0333\40\0\2\40\5\0\4\40"+
    "\1\u0334\25\40\3\0\1\40\41\0\1\u0335\57\0\2\40"+
    "\5\0\22\40\1\u0336\7\40\3\0\1\40\4\0\1\u0337"+
    "\21\0\2\40\5\0\15\40\1\u0338\14\40\3\0\1\40"+
    "\52\0\1\u0339\46\0\2\40\5\0\22\40\1\u033a\7\40"+
    "\3\0\1\40\4\0\1\u033b\21\0\2\40\5\0\4\40"+
    "\1\u033c\25\40\3\0\1\40\57\0\1\u033b\17\0\1\u033b"+
    "\21\0\2\40\5\0\15\40\1\u033d\14\40\3\0\1\40"+
    "\52\0\1\u033e\46\0\2\40\5\0\30\40\1\u033f\1\40"+
    "\3\0\1\40\65\0\1\u0340\33\0\2\40\5\0\10\40"+
    "\1\u0341\21\40\3\0\1\40\3\0\1\u0342\41\0\1\u0342"+
    "\30\0\1\u0342\22\0\2\40\5\0\1\u0343\31\40\3\0"+
    "\1\40\35\0\1\u0344\63\0\2\40\5\0\4\40\1\u0345"+
    "\25\40\3\0\1\40\45\0\1\345\30\0\1\345\31\0"+
    "\1\u0346\76\0\1\u025e\72\0\1\u0347\107\0\1\u0348\72\0"+
    "\1\u0349\53\0\1\u0163\1\0\1\u0164\113\0\1\215\50\0"+
    "\1\u034a\105\0\1\u034b\72\0\1\u034c\60\0\1\u0167\111\0"+
    "\1\u0218\63\0\1\u034d\74\0\1\u034e\56\0\1\u034f\3\0"+
    "\1\u0350\1\0\1\u0351\11\0\1\u0352\1\u0353\15\0\1\u0351"+
    "\1\u0352\52\0\1\216\17\0\1\216\43\0\1\u0177\100\0"+
    "\1\u0354\74\0\1\u0355\71\0\1\u0356\17\0\1\u0356\30\0"+
    "\1\u0269\100\0\1\u0357\70\0\1\u0358\66\0\1\u0359\111\0"+
    "\1\u035a\63\0\1\u035b\5\0\1\u035c\22\0\1\u035b\47\0"+
    "\1\376\54\0\1\u035d\100\0\1\u035e\15\0\1\u035f\46\0"+
    "\1\u0360\115\0\1\u0361\71\0\1\u0297\17\0\1\u0297\46\0"+
    "\1\u015f\60\0\1\u0362\66\0\1\u0363\102\0\1\u0364\30\0"+
    "\1\u0364\53\0\1\u0365\17\0\1\u0365\55\0\1\u0366\45\0"+
    "\1\u02e5\106\0\1\u0264\71\0\1\u0367\57\0\1\u0368\100\0"+
    "\1\u0350\10\0\1\344\2\0\1\u0369\17\0\1\u0369\40\0"+
    "\1\u0351\30\0\1\u0351\31\0\1\216\107\0\1\u036a\61\0"+
    "\1\u036b\72\0\1\u036c\72\0\1\376\72\0\1\u036d\107\0"+
    "\1\376\61\0\1\372\30\0\1\372\43\0\1\u0297\30\0"+
    "\1\u0297\44\0\1\u036e\61\0\1\u036f\101\0\1\u029b\57\0"+
    "\1\337\20\0\1\u0125\72\0\1\u0370\55\0\1\u0371\104\0"+
    "\1\u0163\77\0\1\u0372\47\0\1\u0373\72\0\1\u0374\74\0"+
    "\1\u0375\3\0\1\u0350\1\0\1\u0351\30\0\1\u0351\44\0"+
    "\1\u0376\61\0\1\u0377\106\0\1\u0368\75\0\1\u0378\74\0"+
    "\1\u0379\51\0\1\u037a\70\0\1\u037b\105\0\1\u037c\75\0"+
    "\1\u037d\67\0\1\u037e\101\0\1\u037f\17\0\1\u037f\43\0"+
    "\1\u0380\61\0\1\u0381\113\0\1\u0275\57\0\1\u0382\30\0"+
    "\1\u0382\54\0\1\u0383\40\0\2\40\5\0\10\40\1\u0384"+
    "\21\40\3\0\1\40\3\0\1\u0385\41\0\1\u0385\30\0"+
    "\1\u0385\22\0\2\40\5\0\23\40\1\u0386\6\40\3\0"+
    "\1\40\60\0\1\u0387\40\0\2\40\5\0\21\40\1\u0388"+
    "\10\40\3\0\1\40\26\0\2\40\5\0\17\40\1\u0389"+
    "\12\40\3\0\1\40\54\0\1\u038a\44\0\2\40\5\0"+
    "\16\40\1\u038b\13\40\3\0\1\40\53\0\1\u038c\45\0"+
    "\2\40\5\0\6\40\1\u01ae\23\40\3\0\1\40\43\0"+
    "\1\u038d\101\0\1\u038e\77\0\1\u038f\17\0\1\u038f\33\0"+
    "\1\u0275\106\0\1\u0368\57\0\1\u0390\104\0\1\u0391\57\0"+
    "\1\u0392\73\0\1\u0393\104\0\1\216\63\0\1\u0394\104\0"+
    "\1\u0395\74\0\1\u0396\53\0\1\u0397\107\0\1\u0398\73\0"+
    "\1\u0399\17\0\1\u0399\40\0\1\u02e5\30\0\1\u02e5\41\0"+
    "\1\u039a\30\0\1\u039a\47\0\1\u0228\56\0\1\u039b\111\0"+
    "\1\u0163\74\0\1\u030a\55\0\1\u039c\77\0\1\u039d\74\0"+
    "\1\u039e\76\0\1\u039f\66\0\1\u03a0\100\0\1\u03a1\53\0"+
    "\1\u03a2\114\0\1\u03a3\61\0\1\u035a\55\0\1\u03a4\73\0"+
    "\1\u03a5\101\0\1\u0269\30\0\1\u0269\53\0\1\u03a6\17\0"+
    "\1\u03a6\52\0\1\215\17\0\1\215\34\0\1\u0397\16\0"+
    "\1\344\72\0\1\366\71\0\1\u03a7\17\0\1\u03a7\35\0"+
    "\1\u0395\1\u03a8\14\0\1\u026f\70\0\1\u03a9\75\0\1\345"+
    "\70\0\1\u02ea\17\0\1\u02ea\36\0\1\u03aa\104\0\1\u01ab"+
    "\56\0\1\u03ab\101\0\1\u03ac\74\0\1\u03ad\55\0\1\u0374"+
    "\6\0\1\u0394\113\0\1\u0176\46\0\1\u03ae\72\0\1\u03af"+
    "\67\0\1\u03b0\105\0\1\u0106\71\0\1\u03b1\62\0\1\u0379"+
    "\105\0\1\u03b2\55\0\1\u03b3\114\0\1\u03b4\62\0\1\u0275"+
    "\67\0\1\u03b5\30\0\1\u03b5\45\0\1\u03b6\102\0\1\u03b7"+
    "\37\0\2\40\5\0\16\40\1\u03b8\13\40\3\0\1\40"+
    "\53\0\1\u03b9\45\0\2\40\5\0\22\40\1\u03ba\7\40"+
    "\3\0\1\40\4\0\1\u03bb\52\0\1\u03bb\17\0\1\u03bb"+
    "\21\0\2\40\5\0\22\40\1\u03bc\7\40\3\0\1\40"+
    "\4\0\1\u03bd\21\0\2\40\5\0\4\40\1\u03be\25\40"+
    "\3\0\1\40\41\0\1\u03bf\57\0\2\40\5\0\15\40"+
    "\1\u03c0\14\40\3\0\1\40\52\0\1\u03c1\61\0\1\333"+
    "\71\0\1\u0219\112\0\1\u03c2\47\0\1\u02b2\105\0\1\u03c3"+
    "\67\0\1\u03c4\30\0\1\u03c4\46\0\1\u03c5\55\0\1\u0171"+
    "\110\0\1\u03c6\60\0\1\u03c7\101\0\1\u03c8\57\0\1\u01de"+
    "\116\0\1\u03c9\54\0\1\u03ca\64\0\1\202\101\0\1\216"+
    "\76\0\1\u03cb\62\0\1\366\73\0\1\u03cc\100\0\1\u03cd"+
    "\30\0\1\u03cd\31\0\1\u034f\5\0\1\u0351\30\0\1\u0351"+
    "\44\0\1\u0378\76\0\1\u03ce\66\0\1\u03cf\57\0\1\u0284"+
    "\111\0\1\u03d0\71\0\1\u03d1\54\0\1\u03d2\75\0\1\u03d3"+
    "\73\0\1\u0227\107\0\1\u03d4\74\0\1\u03d5\51\0\1\u0105"+
    "\107\0\1\u03d6\72\0\1\175\77\0\1\u03d7\60\0\1\u03d8"+
    "\30\0\1\u03d8\42\0\1\u03d9\57\0\1\u0272\72\0\1\u03da"+
    "\1\u03b0\71\0\1\u03db\72\0\1\u03dc\76\0\1\u03dd\57\0"+
    "\2\40\5\0\15\40\1\u03de\14\40\3\0\1\40\52\0"+
    "\1\u03df\112\0\1\u03e0\60\0\1\u03e1\51\0\1\345\114\0"+
    "\1\u03e2\72\0\1\u0284\62\0\1\345\63\0\1\345\104\0"+
    "\1\u03e3\70\0\1\u03e4\73\0\1\u03e5\60\0\1\u03e6\103\0"+
    "\1\u03e7\70\0\1\u03e8\57\0\1\u03e9\72\0\1\u03ea\116\0"+
    "\1\u03eb\71\0\1\u03ec\65\0\1\234\75\0\1\u03ed\60\0"+
    "\1\345\106\0\1\u0181\72\0\1\u03ee\62\0\1\u03ef\60\0"+
    "\1\u0394\112\0\1\u03f0\64\0\1\u0306\101\0\1\u03f1\17\0"+
    "\1\u03f1\40\0\1\u03f2\30\0\1\u03f2\31\0\1\u028e\1\0"+
    "\1\u03f3\100\0\1\u03f4\30\0\1\u03f4\52\0\1\u03f5\1\u03f6"+
    "\17\0\1\u03f6\33\0\1\u02f3\70\0\1\u03f7\1\u03f8\1\0"+
    "\1\u03f9\114\0\1\345\67\0\1\u0176\65\0\1\u0120\54\0"+
    "\1\u03fa\74\0\1\u03fb\72\0\1\215\111\0\1\u03fc\60\0"+
    "\1\366\107\0\1\u03fd\71\0\1\u02f9\57\0\1\u03fe\30\0"+
    "\1\u03fe\52\0\1\u03ff\74\0\1\u0400\64\0\1\u0401\70\0"+
    "\1\u0321\76\0\1\u0402\57\0\1\u0403\72\0\1\u0316\72\0"+
    "\1\u0404\104\0\1\u0405\103\0\1\266\73\0\1\366\65\0"+
    "\1\u0406\51\0\1\u0407\107\0\1\216\67\0\1\266\74\0"+
    "\1\u0408\72\0\1\u0409\101\0\1\u0125\102\0\1\u040a\55\0"+
    "\1\u040b\60\0\1\225\100\0\1\u040c\66\0\1\u02f9\30\0"+
    "\1\u02f9\35\0\1\u040d\114\0\1\u01df\65\0\1\u040e\51\0"+
    "\1\u040f\116\0\1\u026f\62\0\1\u0410\63\0\1\u0395\1\u03a8"+
    "\70\0\1\u0379\73\0\1\u0411\75\0\1\u0412\30\0\1\u0412"+
    "\54\0\1\u0413\72\0\1\u0414\53\0\1\u0415\107\0\1\u0416"+
    "\54\0\1\u0417\73\0\1\u0418\73\0\1\u0419\65\0\1\u041a"+
    "\116\0\1\u011f\17\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[57289];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\1\1\1\11\3\1\1\11\1\1\7\11"+
    "\3\1\1\11\24\1\2\11\1\1\1\11\3\1\1\11"+
    "\1\1\3\11\1\0\1\11\1\0\1\1\2\0\3\11"+
    "\24\0\35\1\1\0\3\11\6\0\2\1\73\0\10\1"+
    "\1\0\1\1\1\0\17\1\1\0\5\1\1\0\1\11"+
    "\2\0\1\11\1\0\1\11\7\0\1\11\32\0\1\1"+
    "\54\0\10\1\1\0\5\1\1\0\4\1\1\0\5\1"+
    "\1\0\1\1\1\0\3\1\1\0\1\1\1\0\2\1"+
    "\1\0\3\1\116\0\1\1\11\0\3\1\1\11\3\1"+
    "\1\0\2\1\1\0\1\1\1\0\3\1\1\11\5\1"+
    "\1\0\4\1\1\0\1\1\1\0\3\1\1\0\1\1"+
    "\1\0\2\1\1\0\3\1\1\11\26\0\1\1\4\0"+
    "\1\1\103\0\4\1\1\0\2\1\1\0\1\1\1\11"+
    "\2\1\1\0\1\1\1\11\2\1\1\0\2\1\1\0"+
    "\1\1\1\0\2\1\1\0\1\1\1\0\3\1\1\0"+
    "\1\1\1\0\2\1\20\0\1\1\1\0\1\1\123\0"+
    "\4\1\1\0\2\1\1\0\1\1\1\0\2\1\1\0"+
    "\2\1\1\0\1\1\1\0\2\1\1\0\2\1\1\0"+
    "\1\1\1\0\2\1\1\11\121\0\2\1\1\11\1\1"+
    "\1\0\1\1\1\11\1\1\1\11\1\1\1\0\1\1"+
    "\1\11\2\1\1\11\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\76\0\1\1\1\0\1\1\1\0\2\1"+
    "\1\0\1\1\54\0\1\1\1\0\1\1\1\11\1\1"+
    "\1\11\1\1\1\11\1\1\1\11\33\0\2\1\1\11"+
    "\42\0\1\1\21\0\1\1\6\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[1050];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  SphereScriptLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return TokenType.BAD_CHARACTER;
            }
          // fall through
          case 73: break;
          case 2:
            { return TokenType.WHITE_SPACE;
            }
          // fall through
          case 74: break;
          case 3:
            { return SphereScriptTypes.CRLF;
            }
          // fall through
          case 75: break;
          case 4:
            { return SphereScriptTypes.NOT;
            }
          // fall through
          case 76: break;
          case 5:
            { return SphereScriptTypes.STRING;
            }
          // fall through
          case 77: break;
          case 6:
            { return SphereScriptTypes.MOD;
            }
          // fall through
          case 78: break;
          case 7:
            { return SphereScriptTypes.LPAREN;
            }
          // fall through
          case 79: break;
          case 8:
            { return SphereScriptTypes.RPAREN;
            }
          // fall through
          case 80: break;
          case 9:
            { return SphereScriptTypes.MULT;
            }
          // fall through
          case 81: break;
          case 10:
            { return SphereScriptTypes.PLUS;
            }
          // fall through
          case 82: break;
          case 11:
            { return SphereScriptTypes.COMMA;
            }
          // fall through
          case 83: break;
          case 12:
            { return SphereScriptTypes.MINUS;
            }
          // fall through
          case 84: break;
          case 13:
            { return SphereScriptTypes.DOT;
            }
          // fall through
          case 85: break;
          case 14:
            { return SphereScriptTypes.DIV;
            }
          // fall through
          case 86: break;
          case 15:
            { return SphereScriptTypes.NUMBER;
            }
          // fall through
          case 87: break;
          case 16:
            { return SphereScriptTypes.SEMICOLON;
            }
          // fall through
          case 88: break;
          case 17:
            { yybegin(IN_VARIABLE); return SphereScriptTypes.VARIABLE_START;
            }
          // fall through
          case 89: break;
          case 18:
            { return SphereScriptTypes.EQUALS;
            }
          // fall through
          case 90: break;
          case 19:
            { return SphereScriptTypes.GT;
            }
          // fall through
          case 91: break;
          case 20:
            { return SphereScriptTypes.IDENTIFIER;
            }
          // fall through
          case 92: break;
          case 21:
            { return SphereScriptTypes.LBRACKET;
            }
          // fall through
          case 93: break;
          case 22:
            { return SphereScriptTypes.RBRACKET;
            }
          // fall through
          case 94: break;
          case 23:
            { return SphereScriptTypes.LBRACE;
            }
          // fall through
          case 95: break;
          case 24:
            { return SphereScriptTypes.RBRACE;
            }
          // fall through
          case 96: break;
          case 25:
            { return SphereScriptTypes.VARIABLE_CONTENT;
            }
          // fall through
          case 97: break;
          case 26:
            { yybegin(YYINITIAL); return SphereScriptTypes.CRLF;
            }
          // fall through
          case 98: break;
          case 27:
            { yybegin(YYINITIAL); return SphereScriptTypes.VARIABLE_END;
            }
          // fall through
          case 99: break;
          case 28:
            { return SphereScriptTypes.NE;
            }
          // fall through
          case 100: break;
          case 29:
            { return SphereScriptTypes.AND;
            }
          // fall through
          case 101: break;
          case 30:
            { return SphereScriptTypes.COMMENT;
            }
          // fall through
          case 102: break;
          case 31:
            { return SphereScriptTypes.LE;
            }
          // fall through
          case 103: break;
          case 32:
            { return SphereScriptTypes.EQ;
            }
          // fall through
          case 104: break;
          case 33:
            { return SphereScriptTypes.GE;
            }
          // fall through
          case 105: break;
          case 34:
            { return SphereScriptTypes.ID;
            }
          // fall through
          case 106: break;
          case 35:
            { return SphereScriptTypes.IF;
            }
          // fall through
          case 107: break;
          case 36:
            { return SphereScriptTypes.ON;
            }
          // fall through
          case 108: break;
          case 37:
            { return SphereScriptTypes.OR;
            }
          // fall through
          case 109: break;
          case 38:
            { return SphereScriptTypes.FLOAT_NUMBER;
            }
          // fall through
          case 110: break;
          case 39:
            { return SphereScriptTypes.HEX_NUMBER;
            }
          // fall through
          case 111: break;
          case 40:
            { return SphereScriptTypes.FOR;
            }
          // fall through
          case 112: break;
          case 41:
            { return SphereScriptTypes.BUILTIN_FUNCTION;
            }
          // fall through
          case 113: break;
          case 42:
            { return SphereScriptTypes.SECTION_HEADER;
            }
          // fall through
          case 114: break;
          case 43:
            { return SphereScriptTypes.TRIGGER;
            }
          // fall through
          case 115: break;
          case 44:
            { return SphereScriptTypes.ELSE;
            }
          // fall through
          case 116: break;
          case 45:
            { return SphereScriptTypes.NAME;
            }
          // fall through
          case 117: break;
          case 46:
            { return SphereScriptTypes.TYPE;
            }
          // fall through
          case 118: break;
          case 47:
            { return SphereScriptTypes.BREAK;
            }
          // fall through
          case 119: break;
          case 48:
            { return SphereScriptTypes.ENDIF;
            }
          // fall through
          case 120: break;
          case 49:
            { return SphereScriptTypes.VALUE;
            }
          // fall through
          case 121: break;
          case 50:
            { return SphereScriptTypes.WHILE;
            }
          // fall through
          case 122: break;
          case 51:
            { return SphereScriptTypes.ELSEIF;
            }
          // fall through
          case 123: break;
          case 52:
            { return SphereScriptTypes.ENDFOR;
            }
          // fall through
          case 124: break;
          case 53:
            { return SphereScriptTypes.EVENTS;
            }
          // fall through
          case 125: break;
          case 54:
            { return SphereScriptTypes.RETURN;
            }
          // fall through
          case 126: break;
          case 55:
            { return SphereScriptTypes.AREADEF;
            }
          // fall through
          case 127: break;
          case 56:
            { return SphereScriptTypes.CHARDEF;
            }
          // fall through
          case 128: break;
          case 57:
            { return SphereScriptTypes.DEFNAME;
            }
          // fall through
          case 129: break;
          case 58:
            { return SphereScriptTypes.ITEMDEF;
            }
          // fall through
          case 130: break;
          case 59:
            { return SphereScriptTypes.ROOMDEF;
            }
          // fall through
          case 131: break;
          case 60:
            { return SphereScriptTypes.TYPEDEF;
            }
          // fall through
          case 132: break;
          case 61:
            { return SphereScriptTypes.CATEGORY;
            }
          // fall through
          case 133: break;
          case 62:
            { return SphereScriptTypes.CONTINUE;
            }
          // fall through
          case 134: break;
          case 63:
            { return SphereScriptTypes.ENDWHILE;
            }
          // fall through
          case 135: break;
          case 64:
            { return SphereScriptTypes.FORCHARS;
            }
          // fall through
          case 136: break;
          case 65:
            { return SphereScriptTypes.FORITEMS;
            }
          // fall through
          case 137: break;
          case 66:
            { return SphereScriptTypes.FUNCTION;
            }
          // fall through
          case 138: break;
          case 67:
            { return SphereScriptTypes.TEMPLATE;
            }
          // fall through
          case 139: break;
          case 68:
            { return SphereScriptTypes.FORCLIENTS;
            }
          // fall through
          case 140: break;
          case 69:
            { return SphereScriptTypes.FORPLAYERS;
            }
          // fall through
          case 141: break;
          case 70:
            { return SphereScriptTypes.REGIONTYPE;
            }
          // fall through
          case 142: break;
          case 71:
            { return SphereScriptTypes.SUBSECTION;
            }
          // fall through
          case 143: break;
          case 72:
            { return SphereScriptTypes.DESCRIPTION;
            }
          // fall through
          case 144: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
